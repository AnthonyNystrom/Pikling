<html xmlns:MSHelp="http://msdn.microsoft.com/mshelp"><head><title>MlInvoke Class</title><link rel="stylesheet" type="text/css" href="../styles/presentation.css" /><link rel="stylesheet" type="text/css" href="ms-help://Hx/HxRuntime/HxLink.css" /><script type="text/javascript" src="../scripts/script_prototype.js"> </script><script type="text/javascript" src="../scripts/EventUtilities.js"> </script><script type="text/javascript" src="../scripts/StyleUtilities.js"> </script><script type="text/javascript" src="../scripts/SplitScreen.js"> </script><script type="text/javascript" src="../scripts/ElementCollection.js"> </script><script type="text/javascript" src="../scripts/MemberFilter.js"> </script><script type="text/javascript" src="../scripts/CollapsibleSection.js"> </script><script type="text/javascript" src="../scripts/LanguageFilter.js"> </script><script type="text/javascript" src="../scripts/CookieDataStore.js"> </script><meta name="file" content="a199180b-f1a5-6d3f-c871-9d491ca04ac0" /><xml xmlns:msxsl="urn:schemas-microsoft-com:xslt"><MSHelp:Attr Name="AssetID" Value="T:Emgu.CV.ML.MlInvoke" /><MSHelp:Keyword Index="A" Term="T:Emgu.CV.ML.MlInvoke" /><MSHelp:Keyword Index="A" Term="frlrfEmguCVMLMlInvokeClassTopic" /><MSHelp:Keyword Index="A" Term="frlrfEmguCVMLMlInvokeMembersTopic" /><MSHelp:Keyword Index="K" Term="MlInvoke class" /><MSHelp:Keyword Index="K" Term="Emgu.CV.ML.MlInvoke class" /><MSHelp:Keyword Index="F" Term="MlInvoke" /><MSHelp:Keyword Index="F" Term="Emgu.CV.ML.MlInvoke" /><MSHelp:Attr Name="TopicType" Value="apiref" /><MSHelp:Attr Name="TopicType" Value="kbSyntax" /><MSHelp:Attr Name="APIType" Value="Managed" /><MSHelp:Attr Name="APILocation" Value="Emgu.CV.ML.dll" /><MSHelp:Attr Name="APIName" Value="Emgu.CV.ML.MlInvoke" /><MSHelp:Attr Name="Locale" Value="en-us" /><MSHelp:Attr Name="Abstract" Value="This class contains functions to call into machine learning library" /></xml></head><body><div id="control"><span class="productTitle">Emgu CV Library Documentation</span><br /><span class="topicTitle">MlInvoke Class</span><br /><div id="toolbar"><span id="chickenFeet"><a href="d4648875-d41a-783b-d5f4-638df39ee413.htm">Namespaces</a> ► <a href="b1771ec1-9e4b-1cd4-f6fb-ad89643dd50b.htm">Emgu.CV.ML</a> ► <span class="selflink">MlInvoke</span></span><span id="languageFilter"><select id="languageSelector" onchange="var names = this.value.split(' '); toggleVisibleLanguage(names[1]); lfc.switchLanguage(names[0]); store.set('lang',this.value); store.save();"><option value="CSharp cs">C#</option><option value="VisualBasic vb">Visual Basic</option><option value="ManagedCPlusPlus cpp">Visual C++</option></select></span></div></div><div id="main"><script type="text/javascript"><!--
google_ad_client = "pub-0111567351193216";
/* 728x90, created 8/14/08 */
google_ad_slot = "3483381042";
google_ad_width = 728;
google_ad_height = 90;
//-->
</script>
<script type="text/javascript"
src="http://pagead2.googlesyndication.com/pagead/show_ads.js">
</script></p><span style="color: DarkGray">www.emgu.com/wiki </span><div class="summary">
            This class contains functions to call into machine learning library
            </div><div class="section"><div class="sectionTitle" onclick="toggleSection(this.parentNode)"><img src="../icons/collapse_all.gif" /> Declaration Syntax</div><div class="sectionContent"><div id="syntaxSection"><table class="filter"><tr class="tabs" id="syntaxTabs"><td class="tab" x-lang="CSharp" onclick="toggleClass('syntaxTabs','x-lang','CSharp','activeTab','tab'); toggleStyle('syntaxBlocks','x-lang','CSharp','display','block','none');">C#</td><td class="tab" x-lang="VisualBasic" onclick="toggleClass('syntaxTabs','x-lang','VisualBasic','activeTab','tab'); toggleStyle('syntaxBlocks','x-lang','VisualBasic','display','block','none');">Visual Basic</td><td class="tab" x-lang="ManagedCPlusPlus" onclick="toggleClass('syntaxTabs','x-lang','ManagedCPlusPlus','activeTab','tab'); toggleStyle('syntaxBlocks','x-lang','ManagedCPlusPlus','display','block','none');">Visual C++</td></tr></table><div id="syntaxBlocks"><div class="code" x-lang="CSharp"><pre><span class="keyword">public</span> <span class="keyword">class</span> <span class="identifier">MlInvoke</span></pre></div><div class="code" x-lang="VisualBasic"><pre><span class="keyword">Public</span> <span class="keyword">Class</span> <span class="identifier">MlInvoke</span></pre></div><div class="code" x-lang="ManagedCPlusPlus"><pre><span class="keyword">public</span> <span class="keyword">ref class</span> <span class="identifier">MlInvoke</span></pre></div></div></div></div></div><div class="section"><div class="sectionTitle" onclick="toggleSection(this.parentNode)"><img src="../icons/collapse_all.gif" /> Members</div><div class="sectionContent"><div id="allMembersSection"><table class="filter"><tr class="tabs" id="memberTabs"><td class="tab" value="all" onclick="toggleClass('memberTabs','value','all','activeTab','tab'); processSubgroup('all', 'member'); processList('memberList','filterElement','member');">All Members</td><td class="tab" value="constructor" onclick="toggleClass('memberTabs','value','constructor','activeTab','tab'); processSubgroup('constructor','member');processList('memberList','filterElement','member');">Constructors</td><td class="tab" value="method" onclick="toggleClass('memberTabs','value','method','activeTab','tab'); processSubgroup('method','member'); processList('memberList','filterElement','member');">Methods</td></tr><tr><td class="line" colspan="2"><label for="public"><input id="public" type="checkbox" checked="true" onclick="toggleCheckState('public',this.checked); processList('memberList','filterElement','member');" />Public</label><br /><label for="protected"><input id="protected" type="checkbox" checked="true" onclick="toggleCheckState('protected',this.checked); processList('memberList','filterElement','member');" />Protected</label></td><td class="line" colspan="2"><label for="instance"><input id="instance" type="checkbox" checked="true" onclick="toggleCheckState('instance',this.checked); processList('memberList','filterElement','member');" />Instance</label><br /><label for="static"><input id="static" type="checkbox" checked="true" onclick="toggleCheckState('static',this.checked); processList('memberList','filterElement','member');" />Static</label></td><td class="line" colspan="2"><label for="declared"><input id="declared" type="checkbox" checked="true" onclick="toggleCheckState('declared',this.checked); processList('memberList','filterElement','member');" />Declared</label><br /><label for="inherited"><input id="inherited" type="checkbox" checked="true" onclick="toggleCheckState('inherited',this.checked); processList('memberList','filterElement','member');" />Inherited</label></td></tr></table><table class="members" id="memberList"><tr><th class="iconColumn">Icon</th><th class="nameColumn">Member</th><th class="descriptionColumn">Description</th></tr><tr data="constructor; public; instance; declared"><td><img src="../icons/pubmethod.gif" /></td><td><a href="f22b430c-288c-14e8-a246-5ecec7398447.htm">MlInvoke<span class="languageSpecificText"><span class="cs">()</span><span class="cpp">()</span><span class="nu">()</span></span></a></td><td><div class="summary">Initializes a new instance of the <span class="selflink">MlInvoke</span> class</div><br /></td></tr><tr data="method; public; static; declared"><td><img src="../icons/pubmethod.gif" /><img src="../icons/static.gif" title="static member" /></td><td><a href="0f7db470-6981-88e9-404b-dbedab53a052.htm">CvANN_MLPCreate(IntPtr, ANN_MLP_ACTIVATION_FUNCTION, Double, Double)</a></td><td><div class="summary">
            Create a neural network using the specific parameters
            </div><br /></td></tr><tr data="method; public; static; declared"><td><img src="../icons/pubmethod.gif" /><img src="../icons/static.gif" title="static member" /></td><td><a href="4f3a75bf-73dd-8c52-e90c-b5a695f95374.htm">CvANN_MLPPredict(IntPtr, IntPtr, IntPtr)</a></td><td><div class="summary">
            Given the <span class="parameter">model</span>, predit the <span class="parameter">outputs</span> response of the <span class="parameter">inputs</span> samples
            </div><br /></td></tr><tr data="method; public; static; declared"><td><img src="../icons/pubmethod.gif" /><img src="../icons/static.gif" title="static member" /></td><td><a href="3fbe3bf9-2fc0-81be-01e7-d6434ac9fa31.htm">CvANN_MLPRelease(IntPtr)</a></td><td><div class="summary">
            Release the ANN_MLP model
            </div><br /></td></tr><tr data="method; public; static; declared"><td><img src="../icons/pubmethod.gif" /><img src="../icons/static.gif" title="static member" /></td><td><a href="007598b1-efa5-1e4b-1a05-b4a11a40149f.htm">CvANN_MLPTrain(IntPtr, IntPtr, IntPtr, IntPtr, IntPtr, MCvANN_MLP_TrainParams, ANN_MLP_TRAINING_FLAG)</a></td><td><div class="summary">
            Train the ANN_MLP model with the specific paramters
            </div><br /></td></tr><tr data="method; public; static; declared"><td><img src="../icons/pubmethod.gif" /><img src="../icons/static.gif" title="static member" /></td><td><a href="f76e895e-256a-bbae-0814-26146345c90b.htm">CvBoostCreate<span class="languageSpecificText"><span class="cs">()</span><span class="cpp">()</span><span class="nu">()</span></span></a></td><td><div class="summary">
            Create a default boost classicfier
            </div><br /></td></tr><tr data="method; public; static; declared"><td><img src="../icons/pubmethod.gif" /><img src="../icons/static.gif" title="static member" /></td><td><a href="5afe9f54-5b4b-37ec-d39f-d0cb0e552405.htm">CvBoostParamsCreate<span class="languageSpecificText"><span class="cs">()</span><span class="cpp">()</span><span class="nu">()</span></span></a></td><td><div class="summary">
            Create default parameters for CvBoost
            </div><br /></td></tr><tr data="method; public; static; declared"><td><img src="../icons/pubmethod.gif" /><img src="../icons/static.gif" title="static member" /></td><td><a href="a76f1410-f92a-6bc4-c024-d61c5754afd6.htm">CvBoostParamsRelease(IntPtr)</a></td><td><div class="summary">
            Release the CvBoostParams
            </div><br /></td></tr><tr data="method; public; static; declared"><td><img src="../icons/pubmethod.gif" /><img src="../icons/static.gif" title="static member" /></td><td><a href="1b8784e4-5bb3-28b6-3638-9fa936a5b7b0.htm">CvBoostPredict(IntPtr, IntPtr, IntPtr, IntPtr, MCvSlice, Boolean)</a></td><td><div class="summary">
            Runs the sample through the trees in the ensemble and returns the output class label based on the weighted voting
            </div><br /></td></tr><tr data="method; public; static; declared"><td><img src="../icons/pubmethod.gif" /><img src="../icons/static.gif" title="static member" /></td><td><a href="9aa33235-59c9-2591-d0d6-84607d1c8c7c.htm">CvBoostRelease(IntPtr)</a></td><td><div class="summary">
            Release the boost classicfier
            </div><br /></td></tr><tr data="method; public; static; declared"><td><img src="../icons/pubmethod.gif" /><img src="../icons/static.gif" title="static member" /></td><td><a href="ba7b491c-4101-c295-5707-4cc018f56eca.htm">CvBoostTrain(IntPtr, IntPtr, DATA_LAYOUT_TYPE, IntPtr, IntPtr, IntPtr, IntPtr, IntPtr, MCvBoostParams, Boolean)</a></td><td><div class="summary">
            Train the boost tree using the specific traning data
            </div><br /></td></tr><tr data="method; public; static; declared"><td><img src="../icons/pubmethod.gif" /><img src="../icons/static.gif" title="static member" /></td><td><a href="bb17a6cd-cb1f-ee47-5485-71894d1aaef5.htm">CvDTreeCreate<span class="languageSpecificText"><span class="cs">()</span><span class="cpp">()</span><span class="nu">()</span></span></a></td><td><div class="summary">
            Create a default decision tree
            </div><br /></td></tr><tr data="method; public; static; declared"><td><img src="../icons/pubmethod.gif" /><img src="../icons/static.gif" title="static member" /></td><td><a href="e4f58c7b-fc4b-2f61-71e3-8f37258ac2a0.htm">CvDTreeParamsCreate<span class="languageSpecificText"><span class="cs">()</span><span class="cpp">()</span><span class="nu">()</span></span></a></td><td><div class="summary">
            Create default parameters for CvDTreeParams
            </div><br /></td></tr><tr data="method; public; static; declared"><td><img src="../icons/pubmethod.gif" /><img src="../icons/static.gif" title="static member" /></td><td><a href="81469ca8-ab01-ded1-2453-93541d45122f.htm">CvDTreeParamsRelease(IntPtr)</a></td><td><div class="summary">
            Release the CvDTreeParams
            </div><br /></td></tr><tr data="method; public; static; declared"><td><img src="../icons/pubmethod.gif" /><img src="../icons/static.gif" title="static member" /></td><td><a href="2b6a1ac5-eba9-e729-0491-9c71ae6cef7a.htm">CvDTreePredict(IntPtr, IntPtr, IntPtr, Boolean)</a></td><td><div class="summary">
            The method takes the feature vector and the optional missing measurement mask on input, traverses the decision tree and returns the reached leaf node on output. The prediction result, either the class label or the estimated function value, may be retrieved as value field of the CvDTreeNode structure
            </div><br /></td></tr><tr data="method; public; static; declared"><td><img src="../icons/pubmethod.gif" /><img src="../icons/static.gif" title="static member" /></td><td><a href="c90ca82b-a278-dc2f-2e3e-9e53227e914b.htm">CvDTreeRelease(IntPtr)</a></td><td><div class="summary">
            Release the decision tree model
            </div><br /></td></tr><tr data="method; public; static; declared"><td><img src="../icons/pubmethod.gif" /><img src="../icons/static.gif" title="static member" /></td><td><a href="7c38686b-8496-fba6-db64-a60936a255ed.htm">CvDTreeTrain(IntPtr, IntPtr, DATA_LAYOUT_TYPE, IntPtr, IntPtr, IntPtr, IntPtr, IntPtr, MCvDTreeParams)</a></td><td><div class="summary">
            Train the decision tree using the specific training data
            </div><br /></td></tr><tr data="method; public; static; declared"><td><img src="../icons/pubmethod.gif" /><img src="../icons/static.gif" title="static member" /></td><td><a href="309976e2-8423-a736-838f-f233692369c5.htm">CvEMDefaultCreate<span class="languageSpecificText"><span class="cs">()</span><span class="cpp">()</span><span class="nu">()</span></span></a></td><td><div class="summary">
            Create a default EM model
            </div><br /></td></tr><tr data="method; public; static; declared"><td><img src="../icons/pubmethod.gif" /><img src="../icons/static.gif" title="static member" /></td><td><a href="4859dead-50fd-1ae4-05fd-1cc68a87307c.htm">CvEMGetCovs(IntPtr)</a></td><td><div class="summary">
            Get the covariance matrices of the clusters from the EM model
            </div><br /></td></tr><tr data="method; public; static; declared"><td><img src="../icons/pubmethod.gif" /><img src="../icons/static.gif" title="static member" /></td><td><a href="f7bef300-e982-256c-9fc1-2a7b51897b66.htm">CvEMGetMeans(IntPtr)</a></td><td><div class="summary">
            Get the means of the clusters from the EM model
            </div><br /></td></tr><tr data="method; public; static; declared"><td><img src="../icons/pubmethod.gif" /><img src="../icons/static.gif" title="static member" /></td><td><a href="943a1b6d-fd93-de59-8415-1aa2479c1a17.htm">CvEMGetNclusters(IntPtr)</a></td><td><div class="summary">
            Get the number of clusters from the EM model
            </div><br /></td></tr><tr data="method; public; static; declared"><td><img src="../icons/pubmethod.gif" /><img src="../icons/static.gif" title="static member" /></td><td><a href="577d1fa2-9e26-3c1e-6625-08665ba738b4.htm">CvEMGetProbs(IntPtr)</a></td><td><div class="summary">
            Get the probabilities from the EM model
            </div><br /></td></tr><tr data="method; public; static; declared"><td><img src="../icons/pubmethod.gif" /><img src="../icons/static.gif" title="static member" /></td><td><a href="444f3d44-34db-120d-db1c-a6a18647d91b.htm">CvEMGetWeights(IntPtr)</a></td><td><div class="summary">
            Get the weights of the clusters from the EM model
            </div><br /></td></tr><tr data="method; public; static; declared"><td><img src="../icons/pubmethod.gif" /><img src="../icons/static.gif" title="static member" /></td><td><a href="81a8cb49-0c5d-1e52-550a-9f87353fbf16.htm">CvEMPredict(IntPtr, IntPtr, IntPtr)</a></td><td><div class="summary">
            Given the EM <span class="parameter">model</span>, predit the probability of the <span class="parameter">samples</span></div><br /></td></tr><tr data="method; public; static; declared"><td><img src="../icons/pubmethod.gif" /><img src="../icons/static.gif" title="static member" /></td><td><a href="2e55fc32-bc1b-28d4-f0bc-be115f09a382.htm">CvEMRelease(IntPtr)</a></td><td><div class="summary">
            Release the EM model
            </div><br /></td></tr><tr data="method; public; static; declared"><td><img src="../icons/pubmethod.gif" /><img src="../icons/static.gif" title="static member" /></td><td><a href="ff24679e-df88-2732-544c-19a3498b150c.htm">CvEMTrain(IntPtr, IntPtr, IntPtr, MCvEMParams, IntPtr)</a></td><td><div class="summary">
            Train the EM model using the specific training data
            </div><br /></td></tr><tr data="method; public; static; declared"><td><img src="../icons/pubmethod.gif" /><img src="../icons/static.gif" title="static member" /></td><td><a href="c75b0338-a2fe-6cea-1b9b-a1170bdad369.htm">CvKNearestCreate(IntPtr, IntPtr, IntPtr, Boolean, Int32)</a></td><td><div class="summary">
            Create the KNearest classifier using the specific traing data.
            </div><br /></td></tr><tr data="method; public; static; declared"><td><img src="../icons/pubmethod.gif" /><img src="../icons/static.gif" title="static member" /></td><td><a href="ca1a9dd4-fe92-f0a8-3879-e51868921acc.htm">CvKNearestDefaultCreate<span class="languageSpecificText"><span class="cs">()</span><span class="cpp">()</span><span class="nu">()</span></span></a></td><td><div class="summary">
            Create a KNearest classifier
            </div><br /></td></tr><tr data="method; public; static; declared"><td><img src="../icons/pubmethod.gif" /><img src="../icons/static.gif" title="static member" /></td><td><a href="187547d9-e7c2-56b1-534c-32d765435325.htm">CvKNearestFindNearest(IntPtr, IntPtr, Int32, IntPtr, <span class="languageSpecificText"><span class="cpp">array&lt;</span></span>IntPtr<span class="languageSpecificText"><span class="cpp">&gt;</span><span class="cs">[]</span><span class="vb">()</span><span class="nu">[]</span></span>, IntPtr, IntPtr)</a></td><td><div class="summary">
            For each input vector (which are rows of the matrix <span class="parameter">samples</span>) the method finds k &lt;= get_max_k() nearest neighbor. In case of regression, the predicted result will be a mean value of the particular vector's neighbor responses. In case of classification the class is determined by voting.
            </div><br /></td></tr><tr data="method; public; static; declared"><td><img src="../icons/pubmethod.gif" /><img src="../icons/static.gif" title="static member" /></td><td><a href="30480e96-6952-f57f-1a65-29ca92bb2aa9.htm">CvKNearestRelease(IntPtr)</a></td><td><div class="summary">
            Release the KNearest classifer
            </div><br /></td></tr><tr data="method; public; static; declared"><td><img src="../icons/pubmethod.gif" /><img src="../icons/static.gif" title="static member" /></td><td><a href="eda61a05-6179-f529-1d80-0ba811ac5096.htm">CvKNearestTrain(IntPtr, IntPtr, IntPtr, IntPtr, Boolean, Int32, Boolean)</a></td><td><div class="summary">
            Update the KNearest classifier using the specific traing data.
            </div><br /></td></tr><tr data="method; public; static; declared"><td><img src="../icons/pubmethod.gif" /><img src="../icons/static.gif" title="static member" /></td><td><a href="a97a8bea-b2bd-83e6-999d-d96153296bd6.htm">CvNormalBayesClassifierCreate(IntPtr, IntPtr, IntPtr, IntPtr)</a></td><td><div class="summary">
            Create a normal Bayes classifier using the specific training data
            </div><br /></td></tr><tr data="method; public; static; declared"><td><img src="../icons/pubmethod.gif" /><img src="../icons/static.gif" title="static member" /></td><td><a href="ab9f4aae-8293-e9fa-2be6-c3b44d55c84e.htm">CvNormalBayesClassifierDefaultCreate<span class="languageSpecificText"><span class="cs">()</span><span class="cpp">()</span><span class="nu">()</span></span></a></td><td><div class="summary">
            Create a normal bayes classifier
            </div><br /></td></tr><tr data="method; public; static; declared"><td><img src="../icons/pubmethod.gif" /><img src="../icons/static.gif" title="static member" /></td><td><a href="b3dea444-45de-aad9-0652-6b2f1d2f5ae5.htm">CvNormalBayesClassifierPredict(IntPtr, IntPtr, IntPtr)</a></td><td><div class="summary">
            Given the NormalBayesClassifier <span class="parameter">model</span>, predit the probability of the <span class="parameter">samples</span></div><br /></td></tr><tr data="method; public; static; declared"><td><img src="../icons/pubmethod.gif" /><img src="../icons/static.gif" title="static member" /></td><td><a href="0b9a9e7f-e5df-123c-6535-ac98a8aca1be.htm">CvNormalBayesClassifierRelease(IntPtr)</a></td><td><div class="summary">
            Release the memory associated with the bayes classifier
            </div><br /></td></tr><tr data="method; public; static; declared"><td><img src="../icons/pubmethod.gif" /><img src="../icons/static.gif" title="static member" /></td><td><a href="f4e40ede-2dc5-0f5c-5d4c-f6246aed8098.htm">CvNormalBayesClassifierTrain(IntPtr, IntPtr, IntPtr, IntPtr, IntPtr, Boolean)</a></td><td><div class="summary">
            Train the classifier using the specific data
            </div><br /></td></tr><tr data="method; public; static; declared"><td><img src="../icons/pubmethod.gif" /><img src="../icons/static.gif" title="static member" /></td><td><a href="dbe2912f-efd1-5f90-9f09-c264a4277df5.htm">CvRTParamsCreate<span class="languageSpecificText"><span class="cs">()</span><span class="cpp">()</span><span class="nu">()</span></span></a></td><td><div class="summary">
            Create default parameters for CvRTParams
            </div><br /></td></tr><tr data="method; public; static; declared"><td><img src="../icons/pubmethod.gif" /><img src="../icons/static.gif" title="static member" /></td><td><a href="ad18319f-1b6d-c85c-12c2-67b55587c2ee.htm">CvRTParamsRelease(IntPtr)</a></td><td><div class="summary">
            Release the CvRTParams
            </div><br /></td></tr><tr data="method; public; static; declared"><td><img src="../icons/pubmethod.gif" /><img src="../icons/static.gif" title="static member" /></td><td><a href="2da0583c-58ea-28e6-f8a0-e5ea8f2e26c7.htm">CvRTreesCreate<span class="languageSpecificText"><span class="cs">()</span><span class="cpp">()</span><span class="nu">()</span></span></a></td><td><div class="summary">
            Create a default random tree
            </div><br /></td></tr><tr data="method; public; static; declared"><td><img src="../icons/pubmethod.gif" /><img src="../icons/static.gif" title="static member" /></td><td><a href="2d77050f-e31b-bcea-3ceb-1b5ddc66942c.htm">CvRTreesPredict(IntPtr, IntPtr, IntPtr)</a></td><td><div class="summary">
            The method takes the feature vector and the optional missing measurement mask on input, traverses the random tree and returns the cumulative result from all the trees in the forest (the class that receives the majority of voices, or the mean of the regression function estimates)
            </div><br /></td></tr><tr data="method; public; static; declared"><td><img src="../icons/pubmethod.gif" /><img src="../icons/static.gif" title="static member" /></td><td><a href="c3b9879a-8492-c4a2-5f18-a8dbf85ed32f.htm">CvRTreesRelease(IntPtr)</a></td><td><div class="summary">
            Release the random tree model
            </div><br /></td></tr><tr data="method; public; static; declared"><td><img src="../icons/pubmethod.gif" /><img src="../icons/static.gif" title="static member" /></td><td><a href="70fd4f30-9c90-b5ad-b68f-b45037ea77f2.htm">CvRTreesTrain(IntPtr, IntPtr, DATA_LAYOUT_TYPE, IntPtr, IntPtr, IntPtr, IntPtr, IntPtr, MCvRTParams)</a></td><td><div class="summary">
            Train the random tree using the specific traning data
            </div><br /></td></tr><tr data="method; public; static; declared"><td><img src="../icons/pubmethod.gif" /><img src="../icons/static.gif" title="static member" /></td><td><a href="2580726b-97fe-1b26-2422-3f57ae3538c2.htm">CvSVMDefaultCreate<span class="languageSpecificText"><span class="cs">()</span><span class="cpp">()</span><span class="nu">()</span></span></a></td><td><div class="summary">
            Create a default SVM model
            </div><br /></td></tr><tr data="method; public; static; declared"><td><img src="../icons/pubmethod.gif" /><img src="../icons/static.gif" title="static member" /></td><td><a href="7116572e-092b-8d6a-7af7-168063405885.htm">CvSVMGetDefaultGrid(SVM_PARAM_TYPE, MCvParamGrid<span class="languageSpecificText"><span class="cpp">%</span></span>)</a></td><td><div class="summary">
            Get the default parameter grid for the specific SVM type
            </div><br /></td></tr><tr data="method; public; static; declared"><td><img src="../icons/pubmethod.gif" /><img src="../icons/static.gif" title="static member" /></td><td><a href="4eca27d6-5f54-3395-0231-c029bd1bd210.htm">cvSVMGetSupportVector(IntPtr, Int32)</a></td><td><div class="summary">
            The method retrieves a given support vector
            </div><br /></td></tr><tr data="method; public; static; declared"><td><img src="../icons/pubmethod.gif" /><img src="../icons/static.gif" title="static member" /></td><td><a href="8779d4b7-3b9f-3931-34b0-bf096065bd2e.htm">cvSVMGetSupportVectorCount(IntPtr)</a></td><td><div class="summary">
            The method retrieves the number of support vectors
            </div><br /></td></tr><tr data="method; public; static; declared"><td><img src="../icons/pubmethod.gif" /><img src="../icons/static.gif" title="static member" /></td><td><a href="d38c4902-1be3-336c-6684-2e6b5e949ba3.htm">cvSVMGetVarCount(IntPtr)</a></td><td><div class="summary">
            The method retrieves the number of vars
            </div><br /></td></tr><tr data="method; public; static; declared"><td><img src="../icons/pubmethod.gif" /><img src="../icons/static.gif" title="static member" /></td><td><a href="628fbb9b-f15f-fe5b-a45f-148e37380868.htm">cvSVMPredict(IntPtr, IntPtr)</a></td><td><div class="summary">
            Predicts response for the input sample.
            </div><br /></td></tr><tr data="method; public; static; declared"><td><img src="../icons/pubmethod.gif" /><img src="../icons/static.gif" title="static member" /></td><td><a href="4bebfc99-e3d4-55f9-2f78-d7dd45fcfef1.htm">CvSVMRelease(IntPtr)</a></td><td><div class="summary">
            Release the SVM model and all the memory associated to ir
            </div><br /></td></tr><tr data="method; public; static; declared"><td><img src="../icons/pubmethod.gif" /><img src="../icons/static.gif" title="static member" /></td><td><a href="df5b4f80-4d15-e7f8-57e8-44bba7196286.htm">CvSVMTrain(IntPtr, IntPtr, IntPtr, IntPtr, IntPtr, MCvSVMParams)</a></td><td><div class="summary">
            Train the SVM model with the specific paramters
            </div><br /></td></tr><tr data="method; public; static; declared"><td><img src="../icons/pubmethod.gif" /><img src="../icons/static.gif" title="static member" /></td><td><a href="e7ca0a29-62dc-3c2a-85ab-a6e1c99c365d.htm">CvSVMTrainAuto(IntPtr, IntPtr, IntPtr, IntPtr, IntPtr, MCvSVMParams, Int32, MCvParamGrid, MCvParamGrid, MCvParamGrid, MCvParamGrid, MCvParamGrid, MCvParamGrid)</a></td><td><div class="summary">
            The method trains the SVM model automatically by choosing the optimal parameters C, gamma, p, nu, coef0, degree from CvSVMParams. By the optimality one mean that the cross-validation estimate of the test set error is minimal. 
            </div><br /></td></tr><tr data="method; public; instance; inherited"><td><img src="../icons/pubmethod.gif" /></td><td><a href="http://msdn2.microsoft.com/en-us/library/bsc2ak47" target="_blank">Equals(Object)</a></td><td><div class="summary">Determines whether the specified <a href="http://msdn2.microsoft.com/en-us/library/e5kfa45b" target="_blank">Object</a> is equal to the current <a href="http://msdn2.microsoft.com/en-us/library/e5kfa45b" target="_blank">Object</a>.</div> (Inherited from <a href="http://msdn2.microsoft.com/en-us/library/e5kfa45b" target="_blank">Object</a>.)<br /></td></tr><tr data="method; protected; instance; inherited"><td><img src="../icons/protmethod.gif" /></td><td><a href="http://msdn2.microsoft.com/en-us/library/4k87zsw7" target="_blank">Finalize<span class="languageSpecificText"><span class="cs">()</span><span class="cpp">()</span><span class="nu">()</span></span></a></td><td><div class="summary">Allows an <a href="http://msdn2.microsoft.com/en-us/library/e5kfa45b" target="_blank">Object</a> to attempt to free resources and perform other cleanup operations before the <a href="http://msdn2.microsoft.com/en-us/library/e5kfa45b" target="_blank">Object</a> is reclaimed by garbage collection.</div> (Inherited from <a href="http://msdn2.microsoft.com/en-us/library/e5kfa45b" target="_blank">Object</a>.)<br /></td></tr><tr data="method; public; instance; inherited"><td><img src="../icons/pubmethod.gif" /></td><td><a href="http://msdn2.microsoft.com/en-us/library/zdee4b3y" target="_blank">GetHashCode<span class="languageSpecificText"><span class="cs">()</span><span class="cpp">()</span><span class="nu">()</span></span></a></td><td><div class="summary">Serves as a hash function for a particular type. </div> (Inherited from <a href="http://msdn2.microsoft.com/en-us/library/e5kfa45b" target="_blank">Object</a>.)<br /></td></tr><tr data="method; public; instance; inherited"><td><img src="../icons/pubmethod.gif" /></td><td><a href="http://msdn2.microsoft.com/en-us/library/dfwy45w9" target="_blank">GetType<span class="languageSpecificText"><span class="cs">()</span><span class="cpp">()</span><span class="nu">()</span></span></a></td><td><div class="summary">Gets the <a href="http://msdn2.microsoft.com/en-us/library/42892f65" target="_blank">Type</a> of the current instance.</div> (Inherited from <a href="http://msdn2.microsoft.com/en-us/library/e5kfa45b" target="_blank">Object</a>.)<br /></td></tr><tr data="method; protected; instance; inherited"><td><img src="../icons/protmethod.gif" /></td><td><a href="http://msdn2.microsoft.com/en-us/library/57ctke0a" target="_blank">MemberwiseClone<span class="languageSpecificText"><span class="cs">()</span><span class="cpp">()</span><span class="nu">()</span></span></a></td><td><div class="summary">Creates a shallow copy of the current <a href="http://msdn2.microsoft.com/en-us/library/e5kfa45b" target="_blank">Object</a>.</div> (Inherited from <a href="http://msdn2.microsoft.com/en-us/library/e5kfa45b" target="_blank">Object</a>.)<br /></td></tr><tr data="method; public; static; declared"><td><img src="../icons/pubmethod.gif" /><img src="../icons/static.gif" title="static member" /></td><td><a href="e3d2b37e-a6e1-2e6a-78e9-c07f6fb6d102.htm">StatModelClear(IntPtr)</a></td><td><div class="summary">
            Clear the statistic model
            </div><br /></td></tr><tr data="method; public; static; declared"><td><img src="../icons/pubmethod.gif" /><img src="../icons/static.gif" title="static member" /></td><td><a href="515b9784-4995-f71f-c7e1-e3aa1d95fdcd.htm">StatModelLoad(IntPtr, String, IntPtr)</a></td><td><div class="summary">
            Load the statistic model from the specific file
            </div><br /></td></tr><tr data="method; public; static; declared"><td><img src="../icons/pubmethod.gif" /><img src="../icons/static.gif" title="static member" /></td><td><a href="bfd7e3e1-f40c-9c08-cae2-d43a4fdc88fd.htm">StatModelSave(IntPtr, String, IntPtr)</a></td><td><div class="summary">
            Save the statistic model to the specific file
            </div><br /></td></tr><tr data="method; public; instance; inherited"><td><img src="../icons/pubmethod.gif" /></td><td><a href="http://msdn2.microsoft.com/en-us/library/7bxwbwt2" target="_blank">ToString<span class="languageSpecificText"><span class="cs">()</span><span class="cpp">()</span><span class="nu">()</span></span></a></td><td><div class="summary">Returns a <a href="http://msdn2.microsoft.com/en-us/library/s1wwdcbf" target="_blank">String</a> that represents the current <a href="http://msdn2.microsoft.com/en-us/library/e5kfa45b" target="_blank">Object</a>.</div> (Inherited from <a href="http://msdn2.microsoft.com/en-us/library/e5kfa45b" target="_blank">Object</a>.)<br /></td></tr></table></div></div></div><div class="section"><div class="sectionTitle" onclick="toggleSection(this.parentNode)"><img src="../icons/collapse_all.gif" /> Inheritance Hierarchy</div><div class="sectionContent"><table cellspacing="0" cellpadding="0"><tr><td colspan="2"><a href="http://msdn2.microsoft.com/en-us/library/e5kfa45b" target="_blank">Object</a></td></tr><tr><td><img src="../icons/LastChild.gif" /></td><td><span class="selflink">MlInvoke</span></td></tr></table></div></div><p><div id="footer">For questions and discussions please visit www.emgu.com/forum<p />Send comments on this topic to
        <a id="HT_MailLink" href="mailto:emgucv%40gmail.com?Subject=Emgu CV Library Documentation">emgucv@gmail.com</a>
        <script type="text/javascript">
        var HT_mailLink = document.getElementById("HT_MailLink");
        var HT_mailLinkText = HT_mailLink.innerHTML;
        HT_mailLink.href += ": " + document.title;
        HT_mailLink.innerHTML = HT_mailLinkText;
        </script> <p />2008 Emgu, All Rights Reserved,</div>Assembly: <span sdata="assembly">Emgu.CV.ML</span> (Module: Emgu.CV.ML) Version: 1.0.0.0 (1.0.0.0)</p></div></body></html>